<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Statistics on Peter Amerkhanian</title>
    <link>https://peter-amerkhanian.github.io/tags/statistics/</link>
    <description>Recent content in Statistics on Peter Amerkhanian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2022, Peter Amerkhanian</copyright>
    <lastBuildDate>Sun, 15 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://peter-amerkhanian.github.io/tags/statistics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An SIR Modeling Application in Python</title>
      <link>https://peter-amerkhanian.github.io/post/sir-modeling/</link>
      <pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://peter-amerkhanian.github.io/post/sir-modeling/</guid>
      <description>The following is a memo that I prepared for Jesse Rothstein&amp;rsquo;s &amp;ldquo;Economic Policy for Pandemics&amp;rdquo; Course at Goldman. I&amp;rsquo;m posting it here because I think it presents a simple but effective implementation of the Susceptible, Infected, Recovered (SIR) Model in Python. This is all applied to the COVID-19 pandemic in an effort to produce a policy-relevant simulation of virus spread.
from datetime import datetime import matplotlib.pyplot as plt import numpy as np import pandas as pd import seaborn as sns from IPython.</description>
    </item>
    
    <item>
      <title>Buy vs. Rent, A Financial Modeling Workflow in Python</title>
      <link>https://peter-amerkhanian.github.io/post/rent-v-buy/</link>
      <pubDate>Sat, 06 Aug 2022 14:14:01 -0700</pubDate>
      
      <guid>https://peter-amerkhanian.github.io/post/rent-v-buy/</guid>
      <description>Summary This post goes through the following exercises:
Use numpy-financial to build a loan amortization calculator for a home mortgage Use said table as well as simulated home and stock equity returns over time to compare year-to-year wealth resulting from the following strategies: 1.) buying a residential living space 2.) renting one instead and investing the dollar amount that would have been your down-payment A Note on numpy-financial At one point in time, numpy, the popular Python numerical analysis library, included 10 specialized functions for financial analysis.</description>
    </item>
    
    <item>
      <title>Bootstrapping Mutual Fund Correlation Coefficients in Python</title>
      <link>https://peter-amerkhanian.github.io/post/fidelity-fund-covar/</link>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://peter-amerkhanian.github.io/post/fidelity-fund-covar/</guid>
      <description>import pandas as pd import numpy as np import regex as re import yfinance as yf import pickle import os import datetime import seaborn as sns from matplotlib.pyplot import figure This notebook is an attempt to look at how different low cost Fidelity funds covary. Please note that this notebook is solely for education purposes and is not financial advice.
Data: fidelity_funds.xlsx 92 Fidelity funds that meet the following criteria: No Transaction Fees, No minimum investment below 0.</description>
    </item>
    
  </channel>
</rss>
